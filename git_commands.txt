Frequently used git commands:

### Basic Commands ###

1. **`git init`**:
   - Initializes a new Git repository in the current directory.

2. **`git clone <repository-url>`**:
   - Clones an existing repository from a remote server (like GitHub) to your local machine.

3. **`git status`**:
   - Shows the status of the working directory and staging area, including changes that have been staged, untracked files, and changes that haven’t been committed.

4. **`git add <file>` or `git add .`**:
   - Adds a file or all changes in the current directory to the staging area.

5. **`git commit -m "commit message"`**:
   - Commits the staged changes with a descriptive message.

6. **`git push <remote> <branch>`**:
   - Pushes the committed changes to a remote repository (e.g., `git push origin main`).

7. **`git pull`**:
   - Fetches and merges changes from the remote repository into your current branch.

8. **`git log`**:
   - Shows a log of all commits made to the repository, including author, date, and commit message.

----------------------------------------------------------------------------------------------------

### Branching and Merging ###

1. **`git branch`**:
   - Lists all local branches in the repository. With an additional argument, it can create a new branch (`git branch <branch-name>`).

2. **`git checkout <branch-name>`**:
   - Switches to the specified branch.

3. **`git checkout -b <branch-name>`**:
   - Creates a new branch and immediately switches to it.

4. **`git merge <branch-name>`**:
   - Merges the specified branch into the current branch.

5. **`git branch -d <branch-name>`**:
   - Deletes the specified branch (only if it has been merged).

--------------------------------------------------------------------------------------------------

### Remote Repositories ###

1. **`git remote add <name> <url>`**:
   - Adds a remote repository with a specified name (e.g., `origin`).

2. **`git remote -v`**:
   - Lists the URLs of remote repositories that the local repository is connected to.

3. **`git fetch <remote>`**:
   - Fetches changes from a remote repository without merging them into your working directory.

4. **`git push -u <remote> <branch>`**:
   - Pushes the branch to the remote repository and sets it to track that branch in the future.

--------------------------------------------------------------------------------------------------

### Undoing Changes ###

1. **`git reset <file>`**:
   - Unstages a file, keeping the changes in the working directory.

2. **`git reset --soft <commit>`**:
   - Resets the head to a previous commit but keeps the changes staged.

3. **`git reset --hard <commit>`**:
   - Resets the head to a previous commit and discards all changes in the working directory.

4. **`git revert <commit>`**:
   - Creates a new commit that undoes the changes of a specified commit.

5. **`git stash`**:
   - Temporarily saves changes in the working directory that aren’t ready to be committed and cleans the directory.

6. **`git stash apply`**:
   - Applies the stashed changes back to the working directory.

--------------------------------------------------------------------------------------------------

### Viewing Changes ###

1. **`git diff`**:
   - Shows the differences between your working directory and the index (or between commits/branches).

2. **`git show <commit>`**:
   - Displays information about a specific commit, including the changes made.

--------------------------------------------------------------------------------------------------

### Others ###

1. **`git tag <tag-name>`**:
   - Creates a tag at the current commit. Tags are often used to mark release points (e.g., `v1.0.0`).

2. **`git config --global user.name "Your Name"`**:
   - Sets your Git username.

3. **`git config --global user.email "your.email@example.com"`**:
   - Sets your Git email.
